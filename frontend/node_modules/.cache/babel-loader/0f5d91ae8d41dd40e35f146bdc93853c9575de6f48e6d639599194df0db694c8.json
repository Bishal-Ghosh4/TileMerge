{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nconst useGame = () => {\n  _s();\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const API_BASE = process.env.REACT_APP_API_URL || process.env.NODE_API_URL_LOCAL;\n\n  // Initialize new game\n  const initializeGame = useCallback(async (size = 4) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          size\n        })\n      });\n      if (!response.ok) throw new Error('Failed to initialize game');\n      const data = await response.json();\n      setGameState(data);\n      localStorage.setItem('2048_gameId', data.gameId);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Make a move\n  const makeMove = useCallback(async direction => {\n    if (!(gameState !== null && gameState !== void 0 && gameState.gameId) || loading) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game/${gameState.gameId}/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          direction\n        })\n      });\n      if (!response.ok) throw new Error('Failed to make move');\n      const data = await response.json();\n      setGameState(prev => ({\n        ...prev,\n        ...data\n      }));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.gameId, loading]);\n\n  // Restart game\n  const restartGame = useCallback(async () => {\n    if (!(gameState !== null && gameState !== void 0 && gameState.gameId)) return;\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game/${gameState.gameId}/restart`, {\n        method: 'POST'\n      });\n      if (!response.ok) throw new Error('Failed to restart game');\n      const data = await response.json();\n      setGameState(prev => ({\n        ...prev,\n        ...data\n      }));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.gameId]);\n\n  // Load existing game on mount\n  useEffect(() => {\n    const savedGameId = localStorage.getItem('2048_gameId');\n    if (savedGameId) {\n      // Try to load existing game\n      fetch(`${API_BASE}/game/${savedGameId}`).then(response => {\n        if (response.ok) return response.json();\n        throw new Error('Game not found');\n      }).then(data => setGameState({\n        gameId: savedGameId,\n        ...data\n      })).catch(() => initializeGame());\n    } else {\n      initializeGame();\n    }\n  }, [initializeGame]);\n  return {\n    gameState,\n    loading,\n    error,\n    makeMove,\n    restartGame,\n    initializeGame\n  };\n};\n_s(useGame, \"jyEUHuWcxcC86LL2mWN4iK6xeEQ=\");\nexport default useGame;","map":{"version":3,"names":["useState","useEffect","useCallback","useGame","_s","gameState","setGameState","loading","setLoading","error","setError","API_BASE","process","env","REACT_APP_API_URL","NODE_API_URL_LOCAL","initializeGame","size","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","localStorage","setItem","gameId","err","message","makeMove","direction","prev","restartGame","savedGameId","getItem","then","catch"],"sources":["/Users/bishalghosh/2048-game/frontend/src/hooks/useGame.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst useGame = () => {\n  const [gameState, setGameState] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const API_BASE = process.env.REACT_APP_API_URL || process.env.NODE_API_URL_LOCAL;\n\n  // Initialize new game\n  const initializeGame = useCallback(async (size = 4) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ size }),\n      });\n      \n      if (!response.ok) throw new Error('Failed to initialize game');\n      \n      const data = await response.json();\n      setGameState(data);\n      localStorage.setItem('2048_gameId', data.gameId);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, []);\n\n  // Make a move\n  const makeMove = useCallback(async (direction) => {\n    if (!gameState?.gameId || loading) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game/${gameState.gameId}/move`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ direction }),\n      });\n      \n      if (!response.ok) throw new Error('Failed to make move');\n      \n      const data = await response.json();\n      setGameState(prev => ({ ...prev, ...data }));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [gameState?.gameId, loading]);\n\n  // Restart game\n  const restartGame = useCallback(async () => {\n    if (!gameState?.gameId) return;\n\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`${API_BASE}/game/${gameState.gameId}/restart`, {\n        method: 'POST',\n      });\n      \n      if (!response.ok) throw new Error('Failed to restart game');\n      \n      const data = await response.json();\n      setGameState(prev => ({ ...prev, ...data }));\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  }, [gameState?.gameId]);\n\n  // Load existing game on mount\n  useEffect(() => {\n    const savedGameId = localStorage.getItem('2048_gameId');\n    if (savedGameId) {\n      // Try to load existing game\n      fetch(`${API_BASE}/game/${savedGameId}`)\n        .then(response => {\n          if (response.ok) return response.json();\n          throw new Error('Game not found');\n        })\n        .then(data => setGameState({ gameId: savedGameId, ...data }))\n        .catch(() => initializeGame());\n    } else {\n      initializeGame();\n    }\n  }, [initializeGame]);\n\n  return {\n    gameState,\n    loading,\n    error,\n    makeMove,\n    restartGame,\n    initializeGame,\n  };\n};\n\nexport default useGame;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}